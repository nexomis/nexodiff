% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class_Annotation.r
\name{Annotation}
\alias{Annotation}
\title{Class representing annotation for expression data.}
\description{
An R6 class to represent transcriptome annotation with protein mapping.
Specifically, it provides the following features:
\itemize{
\item Transcriptome annotation:
\itemize{
\item Association of transcript IDs with gene IDs, RNA types, and species
\item Association of gene IDs with gene symbols, protein IDs (UniProt), etc.
}
}
}
\details{
For more information on how to specify the arguments, please refer to the
vignette defining file formats.
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Annotation-new}{\code{Annotation$new()}}
\item \href{#method-Annotation-generate_translate_dict}{\code{Annotation$generate_translate_dict()}}
\item \href{#method-Annotation-get_from_ids}{\code{Annotation$get_from_ids()}}
\item \href{#method-Annotation-get_to_ids}{\code{Annotation$get_to_ids()}}
\item \href{#method-Annotation-export_to_df}{\code{Annotation$export_to_df()}}
\item \href{#method-Annotation-write_to_directory}{\code{Annotation$write_to_directory()}}
\item \href{#method-Annotation-clean_txid_versions}{\code{Annotation$clean_txid_versions()}}
\item \href{#method-Annotation-clone}{\code{Annotation$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Annotation-new"></a>}}
\if{latex}{\out{\hypertarget{method-Annotation-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new \code{Annotation} object.

This method initializes a new \code{Annotation} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Annotation$new(
  annotation = NULL,
  format_gff = TRUE,
  idmapping = NULL,
  annotation_dir = NULL,
  log_level = "WARN",
  suffix_pattern = "\\\\.\\\\d+$",
  gff_type_filter = c(".*RNA", ".*transcript")
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{annotation}}{Path to the annotation file in GFF format / or as
described in the vignette. It can be a vector of files.}

\item{\code{format_gff}}{If \code{TRUE}, the annotation file is in GFF format.}

\item{\code{idmapping}}{Path to the idmapping file, which allows the
mapping of uniprot id to gene id. If not give, the idmapping file will be
downloaded from uniprot using taxon ID from annotation file.}

\item{\code{annotation_dir}}{Path to a directory containing annotation CSV files
(previously generated by \code{write_to_directory}). If provided, this
takes precedence over \code{annotation} and \code{idmapping}.}

\item{\code{log_level}}{Logging level, e.g., "INFO", "WARN", "DEBUG".}

\item{\code{suffix_pattern}}{The regex pattern used see clean_txid_versions
method.}

\item{\code{gff_type_filter}}{Vector of regex patterns to filter the type column
(3rd column of GFF)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new \code{Annotation} object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Annotation-generate_translate_dict"></a>}}
\if{latex}{\out{\hypertarget{method-Annotation-generate_translate_dict}{}}}
\subsection{Method \code{generate_translate_dict()}}{
generate a translate dictionary (named vector) from and id to another
based on the annotation
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Annotation$generate_translate_dict(from, to)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{from}}{the id type corresponding to the keys}

\item{\code{to}}{the id type corresponding to the values}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Below is precised what is available and id type for value depending
on id type for keys
\itemize{
\item Entrez Gene ID \code{gid} (Or equivalent on Ensembl,UCSC...)
\itemize{
\item Gene symbol \code{symbol}
\item Protein name \code{protein_names}
\item Protein ID \code{uniprot}
\item Taxon ID \code{tax_id}
\item Taxon name \code{tax_name}
\item Typed gene ID \code{tgid}
}
\item RefSeq transcript ID \code{txid} (Or equivalent on Ensembl,UCSC...)
\itemize{
\item Entrez Gene ID \code{gid}
\item rna type \code{type}
\item Taxon ID \code{tax_id}
\item Taxon name \code{tax_name}
\item Typed gene ID \code{tgid}
}
\item Typed gene ID \code{tgid} i.e. gene id with type concatenated (sep is _)
(one gene can have several type, some coding, some not coding)
\itemize{
\item Gene symbol \code{symbol}
\item Protein name \code{protein_names} (warning even if not coding type)
\item Protein ID \code{uniprot} (warning even if not coding type)
\item rna type \code{type}
\item Taxon ID \code{tax_id}
\item Taxon name \code{tax_name}
}
\item Uniprot protein ID \code{uniprot}
\itemize{
\item Entrez Gene ID \code{gid}
\item Protein name \code{protein_names}
\item Gene symbol \code{symbol}
}
\item Gene symbol \code{symbol}
\itemize{
\item Entrez Gene ID \code{gid}
\item Protein ID \code{uniprot}
}
}
}

\subsection{Returns}{
a named vector that can translate from an id type to another
Get the list of id type available for translate dicttionary as keys
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Annotation-get_from_ids"></a>}}
\if{latex}{\out{\hypertarget{method-Annotation-get_from_ids}{}}}
\subsection{Method \code{get_from_ids()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Annotation$get_from_ids()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
vecotr with potentioal key "from"
Get the list of id type available for translate dicttionary as values
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Annotation-get_to_ids"></a>}}
\if{latex}{\out{\hypertarget{method-Annotation-get_to_ids}{}}}
\subsection{Method \code{get_to_ids()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Annotation$get_to_ids(from)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{from}}{the key of the translate dictionary}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
vecotr with potentioal key "to"
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Annotation-export_to_df"></a>}}
\if{latex}{\out{\hypertarget{method-Annotation-export_to_df}{}}}
\subsection{Method \code{export_to_df()}}{
Export annotation data to a data.frame for a given 'from' ID type.

For a specified 'from' ID type, this method creates a data.frame
where each row corresponds to a unique 'from' ID, and columns
represent all associated 'to' ID types. Missing associations
will be represented as NA.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Annotation$export_to_df(from)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{from}}{The primary ID type (e.g., "gid", "txid") to use for rows.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A data.frame with the 'from' ID type as the first column,
followed by columns for each derivable 'to' ID type. Returns an
empty data.frame if 'from' is invalid or no data can be constructed.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Annotation-write_to_directory"></a>}}
\if{latex}{\out{\hypertarget{method-Annotation-write_to_directory}{}}}
\subsection{Method \code{write_to_directory()}}{
Write all annotation data frames to a specified directory.

This method iterates through all available 'from' ID types,
generates a data.frame for each using \code{self$export_to_df()},
and writes each data.frame to a CSV file named after the
'from' ID type (e.g., "gid.csv") in the specified directory.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Annotation$write_to_directory(directory_path)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{directory_path}}{The path to the directory where CSV files
will be written. The directory will be created if it does not exist.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisibly returns TRUE if successful, or FALSE/throws error on failure.
Logs information about files written or warnings for types with no data.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Annotation-clean_txid_versions"></a>}}
\if{latex}{\out{\hypertarget{method-Annotation-clean_txid_versions}{}}}
\subsection{Method \code{clean_txid_versions()}}{
Clean version suffixes from transcript IDs within the internal annotation
structures.

This method iterates through the \code{private$annotations} object.
If a \code{from_key} (names of a mapping) is "txid", it cleans these names.
If a \code{to_key} (values of a mapping) is "txid", it cleans these values.
It uses the \code{remove_id_version_suffix} utility function.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Annotation$clean_txid_versions(suffix_pattern = "\\\\.\\\\d+$")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{suffix_pattern}}{(character) The regex pattern for the version
suffix. Default is \code{"\\\\.\\\\d+$"}. If \code{NULL}, \code{FALSE}, or an empty
string, no cleaning is performed.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Annotation-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Annotation-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Annotation$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
